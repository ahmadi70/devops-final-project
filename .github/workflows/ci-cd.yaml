name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Step 1: Build and test the application
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOCKEN }}

      # Build backend
      - name: Build Backend Docker Image
        run: docker build -t nahid70/devops-final-backend:latest ./expensy_backend

      # Build frontend
      - name: Build Frontend Docker Image
        run: docker build -t nahid70/devops-final-frontend:latest ./expensy_frontend

      # Push updated images to DockerHub
      - name: Push Backend Docker Image
        run: docker push nahid70/devops-final-backend:latest

      - name: Push Frontend Docker Image
        run: docker push nahid70/devops-final-frontend:latest

  # Step 2: Deploy to staging environment
  deploy-staging:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOCKEN }}

      - name: Deploy to Staging Environment
        run: |
          docker compose -f docker-compose.yaml down
          docker compose -f docker-compose.yaml up -d

  # Step 3: Deploy to production
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Approval for Production Deployment
        id: approve
        uses: hmarr/auto-approve-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        if: github.event.pull_request.merged == true
        run: |
          docker compose -f docker-compose.prod.yaml down
          docker compose -f docker-compose.prod.yaml up -d